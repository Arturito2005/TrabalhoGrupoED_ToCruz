@startuml DiagramaClassesToCruz

package "Mapa" {
    /'
    Provavelmente é preciso remover este boolean
    '/
    class Divisao {
        - int id_Divisao
        - String nome
        - boolean entrada_saidas
    }

    /'
    As Divisao do edifio vão ser um grafo
    o grafo é construido quando e feita a importação dos dados
    '/
    class Edificio {
        - int id_edificio
        - int contDivisoes
        - GrafoDivisao Divisao
        --
        + MetodoGerarMapa
    }

    Edificio "1..1" -- "1..*" Divisao
    /'
    Talvez meter o type como uma String se sim remover typeAlvo acima
    
    O boolean antigido representa se o objeto já foi coletado ou não pelo 
    ToCruz
    '/
    class Alvo {
        - int id_alvo
        - String nome
        - Divisao divisao
        - String alvo
        - boolean atinigido
        --
        + setAntigido(boolean antigido)
    }

    enum typeItem {
        kit_vida
        coletes
    }

    /'Se houver diferente entre o que cada item fornce,
    criar hierarquia'/
    abstract class Item {
        - int id_item
        - Divisao divisao
    }

    class ItemCura extends Item{
        - typeItem type
        - double vida_recuperada
    }


    Alvo "1..1" -- "1..1" Divisao
    ItemCura "1..1" -- "1..1" Divisao
    ItemCura "1..1" -- "0..*" typeItem
}

package "personagens" {
    
    /'Não daria para meter o To Cruz e o inimigo como uma enum,
    mas só fazer se nã achar mais campos para o inimigo e para o To Cruz'/
    interface interacoesPersonagens {
        + void movimentacao()
        + void ataque()
    }
    
    abstract class Personagem extends interacoesPersonagens {
        - int id_personagem
        - String nome
        - double vida
        - Divisao divisao
        - boolean confronto
        --
        + geteres()
        - setVida()
        - setDivisao()
        - abstract attack(double vida_perdida)
    }

    interface interacoesToCruz {
        + public void guardarKit(Item item)        
        + public void usarKit()
        + public void usarColete(double colete)
    }

    /'
    A Stack guarda apenas os kitVida
    A double vidaColete em principio não é necessário.
    O ToCruz não tem a variavel poder, porque ele vai dar sempre
    instaKill
    '/
    class ToCruz extends Personagem implements interacoesToCruz {
        - static final double DEFAULT_VIDA = 100
        - StackItems mochila
        - double vidaColete
        --
        + attack(double vida_perdida)
    }

    class Inimgo extends Personagem {
        - double poder
        --
    }

    Personagem "1..1" -- "0..*" Divisao
    ToCruz "1..1" -- "0..*" Item
}

package "Missoes" {

    /'
    O item é uma LinkedList ou um array
    As entras também podem ser LinkedList ou Stacks 

    Estes campos também podem ser Listas (que pode ser melhor)

    No construtor o ToCruz não é mandado no 
    '/
    class Missao {
        - string nome
        - int versao
        - Edificio edificio
        - Alvo alvo
        - ListaUnordered item
        - ListaUnordered entradas_saidas
        - ListaUnordered inimigos
        - ToCruz toCruz
        - boolean sucesso
        --
        + String resumoMissao()
        + Inimigo removeInimigo
    }

    Missao "1..1" -- "0..*" Item
    Missao "1..1" -- "1..1" Edificio
    Missao "1..1" -- "1..*" Divisao
    Missao "1..1" -- "1..*" Inimgo
    Missao "1..1" -- "1..1" ToCruz
}

package "Importar Dados" {

    class Import {
        --
        + void importData(String path)
    }

    Import "1..1" -- "1..1" Missao
}

package "Exportar Dados" {

    class Exportar {
        --
        + void exportarDados()
    }

    Exportar "1..1" -- "1..1" Missao
}

@enduml